#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/ssh-resource-request.XXXXXX)

cat > $payload <&0

# load_pubkey $payload
# configure_credentials $payload

TMPDIR=${TMPDIR:-/tmp}
private_key_path=$TMPDIR/ssh-resource-private-key
(jq -r '.source.private_key // empty' < $payload) > $private_key_path

if [ -s "$private_key_path" ]; then
  chmod 0600 $private_key_path
fi

# to avoid "Are you sure you want to continue connecting?"
mkdir -p ~/.ssh
cat > ~/.ssh/config <<EOF
StrictHostKeyChecking no
EOF

host=$(jq -r '.source.host // ""' < $payload)
username=$(jq -r '.source.username // ""' < $payload)
password=$(jq -r '.source.password // ""' < $payload)
command=$(jq -r '.params.command // ""' < $payload)

if [ -z "$host" ]; then
  echo "invalid payload (missing host)"
  exit 1
fi

if [ -z "$command" ]; then
  echo "invalid payload (missing command)"
  exit 1
fi

cd $source

connection=""
if [ -z "$username" ]; then
  connection="$host"
elif [ -z "$password" ]; then
  connection="$username@$host"
else
  connection="$username:$password@$host"
fi

echo "connecting to $connection to run ( $command )..."

ssh -i $private_key_path $connection $command

timestamp=$(date)

jq -n '{
  "version": {
    "Executed at": $timestamp
  },
  "metadata": [
    {"name": "connection", "value": $connection},
    {"name": "command", "value": $command}
  ]
}' --arg timestamp "$timestamp" --arg connection "$connection" --arg command "$command" >&3

exit 0
